//
//  main.swift
//  zone-metadata-generator
//
//  Created by jon on 6/9/22.
//

import Foundation
import CollectionConcurrencyKit
import kuluu_ffxi_emulator
import XMLCoder
import Stencil

struct Entity: Codable {
    var name: String
    var serverId: Int
    var targetIndex: Int
    var zoneId: Int
    
    enum CodingKeys: String, CodingKey {
        case name = "Name"
        case serverId = "ServerId"
        case targetIndex = "TargetIndex"
        case zoneId = "ZoneId"
    }
}

struct ArrayOfEntity: Codable {
    var entities: [Entity]
    
    enum CodingKeys: String, CodingKey {
        case entities = "Entity"
    }
}


enum ZoneMetadataType: String, Codable {
    case fishing = "Fishing area"
    case zoneLine = "ZoneLine"
    case doorOrObject = "Door or Object"
    case event = "Event"
    case elevator = "Elevators"
    case model = "Model"
}

struct ArrayOfSubRegion: Codable {
    var zoneMetadatas: [ZoneMetadata]
    
    enum CodingKeys: String, CodingKey {
        case zoneMetadatas = "SubRegion"
    }
}

struct ZoneMetadata: Codable, Identifiable {
    let fileId: Int
    let id: String
    
    let positionX: Float
    let positionY: Float
    let positionZ: Float
    
    lazy var simdPosition: SIMD3<Float> = {
        .init(x: positionX, y: positionY, z: positionZ)
    }()
    
    let rotationX: Float
    let rotationY: Float
    let rotationZ: Float
    
    lazy var simdRotation: SIMD3<Float> = {
        .init(x: rotationX, y: rotationY, z: rotationZ)
    }()
    
    let scaleX: Float
    let scaleY: Float
    let scaleZ: Float
    
    lazy var simdScale: SIMD3<Float> = {
        .init(x: scaleX, y: scaleY, z: scaleZ)
    }()
    
    let type: ZoneMetadataType?
    
    enum CodingKeys: String, CodingKey {
        case id = "Identifier"
        case fileId = "FileId"
        case positionX = "X"
        case positionY = "Y"
        case positionZ = "Z"
        case rotationX = "RotationX"
        case rotationY = "RotationY"
        case rotationZ = "RotationZ"
        case scaleX = "ScaleX"
        case scaleY = "ScaleY"
        case scaleZ = "ScaleZ"
        case type = "Type"
    }
}

let xmlDecoder: XMLDecoder = {
    let xmlDecoder = XMLDecoder()
    //    xmlDecoder.keyDecodingStrategy = .convertFromCapitalized
    //    xmlDecoder.shouldProcessNamespaces = false
    //    xmlDecoder.removeWhitespaceElements = false
    //    xmlDecoder.trimValueWhitespaces = false
    return xmlDecoder
}()

struct ZoneDescriptor {
    init(zoneInfo: ZoneInfo, entity: [Entity]? = nil, zoneMetadatas: [ZoneMetadata]? = nil) {
        self.zoneInfo = zoneInfo
        self.entity = entity
        self.zoneMetadatas = zoneMetadatas
    }
    
    var zoneInfo: ZoneInfo!
    
    var entity: [Entity]!
    var zoneMetadatas: [ZoneMetadata]!
}

fileprivate let badChars = CharacterSet.alphanumerics.inverted

extension String {
    var uppercasingFirst: String {
        return prefix(1).uppercased() + dropFirst()
    }
    
    var lowercasingFirst: String {
        return prefix(1).lowercased() + dropFirst()
    }
    
    var camelized: String {
        guard !isEmpty else {
            return ""
        }
        
        let parts = self.components(separatedBy: badChars)
        
        let first = String(describing: parts.first!).lowercasingFirst
        let rest = parts.dropFirst().map({String($0).uppercasingFirst})
        
        return ([first] + rest).joined(separator: "")
    }
    
    var upperCamelized: String {
        guard !isEmpty else {
            return ""
        }
        
        let parts = self.components(separatedBy: badChars)
        
        let first = String(describing: parts.first!).uppercasingFirst
        let rest = parts.dropFirst().map({String($0).uppercasingFirst})
        
        return ([first] + rest).joined(separator: "")
    }
}

typealias ZoneDescriptorMap = [Int: ZoneDescriptor]

@main
struct CLI {
    static func main() async throws {
        let zoneDescriptorMap = try await loadZoneDescriptorMap()
        let stencil = Stencil.Environment()
        let shortDate: String = {
            let df = DateFormatter()
            df.dateStyle = .short
            return df.string(from: .init())
        }()
        let template = """
        //
        //  {{ className }}.swift
        //
        //  Auto-generated by `zone-metadata-generator` on \(shortDate)
        //
        public extension Zone {
            struct {{ className }}: ZoneSceneMetadata {
                public let id = Zone.{{ instanceName }}.rawValue
                public let name = "{{ name }}"
                public let lines: [ZoneLine] = [{% for zl in zoneLines %}
                    .init(
                        name: "{{ zl.id }}",
                        position: .init(x: {{ zl.positionX }}, y: {{ zl.positionY }}, z: {{ zl.positionZ }}),
                        rotation: .init(x: {{ zl.rotationX }}, y: {{ zl.rotationY }}, z: {{ zl.rotationZ }}),
                        scale: .init(x: {{ zl.scaleX }}, y: {{ zl.scaleY }}, z: {{ zl.scaleZ }})
                    ),{% endfor %}
                ]
                public var fog: Fog?
                public var environment: ZoneEnvironment? {
                    return .init(
                        skybox: nil,
                        atmosphere: nil
                    )
                }
            }
        }
        """
        try await zoneDescriptorMap.concurrentForEach { row in
            let (key, zone) = row
            let className = zone.zoneInfo.name.upperCamelized
            guard let classNameFirst = className.first, classNameFirst.isLetter || classNameFirst == "_" else { return print("skip \(className)") }
            let name = zone.zoneInfo.name
            let instanceName = name.camelized
            print(zone.zoneInfo.name)
            let zoneLines: [ZoneMetadata] = zone.zoneMetadatas.compactMap { $0.type == .zoneLine ? $0 : nil }
            let context: [String: Any] = [
                "id": key,
                "name": name,
                "className": className,
                "instanceName": instanceName,
                "zoneLines": zoneLines
            ]
            let zoneCode = try stencil.renderTemplate(string: template, context: context)
//            Task(priority: .low) {
                let url = URL.init(string: "file:///Users/jon/src/kuluu/kuluu-ffxi-emulator/Sources/kuluu-ffxi-emulator/Zones/\(className).swift")
                try zoneCode.data(using: .utf8)?.write(to: url!)
                print("written \(className).swift")
//            }
        }
        let zones = Array(zoneDescriptorMap.values.filter { zone in
            let className = zone.zoneInfo.name.upperCamelized
            guard let classNameFirst = className.first, classNameFirst.isLetter || classNameFirst == "_" else { return false }
            return true
        }.sorted(by: { $0.zoneInfo.id < $1.zoneInfo.id }))
        func renderCases(zones: [ZoneDescriptor]) -> String {
            var renderer = ""
            var isFirst = true
            for zone in zones {
                renderer.append(contentsOf: "\(isFirst ? "" : "    ")case \(zone.zoneInfo.name.camelized) = \(zone.zoneInfo.id)\n")
                isFirst = false
            }
            return renderer
        }
        func renderMetadataCases(zones: [ZoneDescriptor]) -> String {
            var renderer = ""
            var isFirst = true
            for zone in zones {
                renderer.append(contentsOf: "\(isFirst ? "" : "        ")case .\(zone.zoneInfo.name.camelized): return \(zone.zoneInfo.name.upperCamelized)()\n")
                isFirst = false
            }
            return renderer
        }
        let enumTemplate = """
        public enum Zone: Int, CaseIterable {
            public static var current: Zone = Self.allCases.first!
            \(renderCases(zones: zones))
            public var metadata: ZoneSceneMetadata {
                switch self {
                \(renderMetadataCases(zones: zones))
                }
            }
            
            public var spawnPoint: SIMD3<Float>? {
                metadata.lines.first?.position
            }
            
            public var nodeName: String {
                .init(rawValue)
            }
        }
        """
        
        let url = URL.init(string: "file:///Users/jon/src/kuluu/kuluu-ffxi-emulator/Sources/kuluu-ffxi-emulator/Zone.swift")
        try enumTemplate.data(using: .utf8)?.write(to: url!)
    }
}

//#if !SWIFT_PACKAGE
//private class TestBundleTarget { }
//#endif

func loadZoneDescriptorMap() async throws -> ZoneDescriptorMap {
    // swift can be fast if u use all da cores, watch this.
    // load all of the xml file urls in our resources
//    #if SWIFT_PACKAGE
    let bundle = Bundle.module
//    #else
//    let bundle = Bundle.init(for: TestBundleTarget.self)
//    #endif
    let entityUrls = bundle.urls(forResourcesWithExtension: "xml", subdirectory: "Data/Entities")?.sorted(by: { l, r in
        l.relativeString > r.relativeString
    })
    let subregionUrls = bundle.urls(forResourcesWithExtension: "xml", subdirectory: "Data/SubRegions")?.sorted(by: { l, r in
        l.relativeString > r.relativeString
    })
    assert(entityUrls?.count == subregionUrls?.count)
    
    let zoneInfoUrl = bundle.url(forResource: "Data/ZoneINFO", withExtension: "json")!
    let zoneInfoJsonData = try Data(contentsOf: zoneInfoUrl, options: [])
    let jsonDecoder = JSONDecoder()
    print("ZoneINFO.json data length: ", zoneInfoJsonData.count)
    
    let zoneInfo: ZoneInfoContainer = try jsonDecoder.decode(ZoneInfoContainer.self, from: zoneInfoJsonData)
    
    let zoneInfoMap = zoneInfo.zoneInfo.reduce(into: .init(minimumCapacity: 600) as [Int: ZoneInfo], { acc, next in
        acc[next.id] = next
    })
    
    // pair urls with their data contents so we can process different urls differently if needed
    // (e.g. subregion vs. entities)
    
    struct ZoneDescriptorData {
        let zoneInfo: ZoneInfo
        let entity: Data
        let subregion: Data
    }
    
    let dataTuples = try await entityUrls?.concurrentCompactMap { entityUrl -> ZoneDescriptorData? in
        let split = entityUrl.lastPathComponent.split(separator: "_")
        guard
            let subregionUrls = subregionUrls,
            split.count > 1,
            subregionUrls.count > 1,
            let id = Int(split[1]),
            subregionUrls.count > id,
            let zoneInfo = zoneInfoMap[id]
        else { return nil }
        
        let subregionUrl = subregionUrls[id]
        return .init(
            zoneInfo: zoneInfo,
            entity: try Data(contentsOf: entityUrl),
            subregion: try Data(contentsOf: subregionUrl)
        )
    }
    
    // decode XML concurrently
    let zoneDescriptorMap = try await dataTuples?.concurrentCompactMap { zoneData -> ZoneDescriptor? in
        let subRegionsXML = try xmlDecoder.decode(ArrayOfSubRegion.self, from: zoneData.subregion)
        let zoneMetadatas = subRegionsXML.zoneMetadatas
        let entitiesXML = try xmlDecoder.decode(ArrayOfEntity.self, from: zoneData.entity)
        let entities = entitiesXML.entities

        return .init(zoneInfo: zoneData.zoneInfo, entity: entities, zoneMetadatas: zoneMetadatas)
    }.reduce(into: .init(minimumCapacity: zoneInfoMap.count) as ZoneDescriptorMap, { acc, next in
        acc[next.zoneInfo.id] = next
    })
    
    return zoneDescriptorMap!
}
